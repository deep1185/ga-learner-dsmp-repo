import pandas as pd
import numpy as np
import seaborn as sns
from matplotlib import pyplot 
from numpy import nan
df1 = pd.read_csv(r"C:\Users\deep.mandal\Documents\MTD_Data\DP_data_Nov_MTD_new.txt",sep="\t",parse_dates=True)
df1.head()
df2 = pd.read_csv(r"C:\Users\deep.mandal\Documents\MTD_Data\DP_data_Dec_MTD_4812_logic.txt",sep="\t",parse_dates=True)
df2.head()
df3 = pd.read_csv(r"C:\Users\deep.mandal\Documents\MTD_Data\DP_data_Jan_MTD.txt",sep="\t",parse_dates=True)
df3.head()
df4 = pd.read_csv(r"C:\Users\deep.mandal\Documents\MTD_Data\DP_data_Feb_MTD.txt",sep="\t",parse_dates=True)
df4.head()
df5 = pd.read_csv(r"C:\Users\deep.mandal\Documents\MTD_Data\DP_Data_March_MTD.txt",sep="\t",parse_dates=True)
df5.head()
df6 = pd.read_csv(r"C:\Users\deep.mandal\Documents\MTD_Data\DP_Data_April22_MTD.txt",sep="\t",parse_dates=True)
df6.head()
df21 = pd.concat([df1,df2])
df21.head()
df21['VIS_MON'].unique()
df21['VIS_YR'].unique()
df22 = pd.concat([df3,df4,df5,df6])
df22.head()
df22['VIS_MON'].unique()
df22['VIS_YR'].unique()
df = pd.concat([df21,df22])
df.head()
df['VIS_MON'].unique()
df['VIS_YR'].unique()
df.columns
df.shape
map1 = pd.read_csv(r"C:\Users\deep.mandal\Documents\mapping\Mapping.txt", sep= "\t")
map2 = pd.read_csv(r"C:\Users\deep.mandal\Documents\mapping\Channel_BU_mapping.txt", sep= "\t")
map3 = pd.read_csv(r"C:\Users\deep.mandal\Documents\mapping\Market_mapping.txt", sep= "\t")
map4 = pd.read_csv(r"C:\Users\deep.mandal\Documents\mapping\BDA_BU_mapping.txt", sep= "\t")
map1.columns = ['CAT_NBR' , 'BU']
map2.columns = ['BU', 'Channel_BU']
map3.columns = ['STORE_NBR','PBI Market']
map4.columns = ['Key','Combination code']
print(map1.head())
print(map2.head())
print(map3.head())
print(map4.head())
df = pd.merge(df, map1, on ='CAT_NBR', how ='left')
df.head()
df.shape
df = pd.merge(df, map2, on ='BU', how ='left')
df.head()
df.shape
df = pd.merge(df, map3, on ='STORE_NBR', how ='left')
df.head()
df.shape
df['Member_store'] = df['MEMBERSHIP_NBR'].astype(str)+ df['STORE_NBR'].astype(str)
df.head()
df.shape
df.columns
df.BU.unique()
df.CAT_NBR.unique()
def ddf_column(ddf):
    
    ddf['Int_sub_cat']=ddf['CHANNEL_ADD_ON']
    ddf.loc[((ddf['CHANNEL_ADD_ON']=='BDA')&(ddf['Duplicate_flag']== 1)),'Int_sub_cat']=ddf['Channel_BU']
    ddf.loc[((ddf['CHANNEL_ADD_ON']=='BDA')&(ddf['Duplicate_flag']== 0)),'Int_sub_cat']=ddf['SUB_CAT']
    ddf.loc[(ddf['BU']=='Fashion'),'Int_sub_cat']='In-store'

    return ddf
df7 = ddf_column(df)
df7.isnull().sum()
df7.shape
def ddf_column1(ddf):
    ddf.loc[~ddf['Int_sub_cat'].isna(),'Final_Sub_Cat']=ddf['Int_sub_cat']
    ddf.loc[ddf['Int_sub_cat'].isna(),'Final_Sub_Cat']=ddf['CHANNEL_ADD_ON']
    ddf.loc[(ddf['Int_sub_cat'].isna())&(ddf['STORE_NBR']==4812),'Final_Sub_Cat']="Un-Assisted Ecom"
    return ddf
df8 = ddf_column1(df7)
df8.head()
df8['Int_sub_cat'].unique()
df8['Final_Sub_Cat'].unique()
df8.isnull().sum()
df8.shape
df8['SUB_CAT'].unique()
df8['BU'].unique()
df8['Key'] = df8['BU'].astype(str)+ df8['SUB_CAT'].astype(str)
df7.head()
df8['Key'].unique()
df8 = pd.merge(df8, map4, on ='Key', how ='left')
df8.head()
df8.shape
df8.isnull().sum()
df8['Combination code'].unique()
import numpy as np
# create a list of our conditions 
conditions = [
    (df8['Duplicate_flag'] == 0),
    (df8['Duplicate_flag']== 1)&(df8['Combination code']== 0),
    (df8['Duplicate_flag']== 1)&(df8['Combination code']== 1)]

# create a list of the values we want to assign for each condition
values = [1,0,1]

# create a new column and use np.select to assign values to it using our lists as arguments
df8['Final Selection'] = np.select(conditions, values)
df8.shape
df8.columns
df8.head()
df8['Final Selection'].unique()
df9 = df8.filter(['VIS_MON', 'STORE_NBR', 'TRANSACTION_NUMBER', 'MEMBERSHIP_NBR', 'CHANNEL_ADD_ON', 'SALES', 'QTY', 'Final Selection'], axis=1) 
df9.head()
df9.shape
df10 = df9[df9['Final Selection']==1]
df10.head()
df10.columns
df10.VIS_MON.unique()
s12 = df10.groupby(['CHANNEL_ADD_ON']).agg({'SALES': 'sum'})
channel_sales = pd.DataFrame(s12*0.0000001)
channel_sales
df10.columns
transactions = df10.groupby(['VIS_MON','STORE_NBR','MEMBERSHIP_NBR','CHANNEL_ADD_ON']).agg({'TRANSACTION_NUMBER': 'nunique','SALES': 'sum'}).reset_index()
member_transactions = pd.DataFrame(transactions)
member_transactions
member_transactions['key'] = member_transactions['MEMBERSHIP_NBR'].astype(str)+ member_transactions['CHANNEL_ADD_ON'].astype(str) + member_transactions['STORE_NBR'].astype(str)
member_transactions.head()
member_transactions['count'] = member_transactions.groupby('key')['key'].transform('size')
member_transactions.head()
import numpy as np
# create a list of our conditions 
conditions = [
    (member_transactions['count'] >= 4),
    (member_transactions['count']!= 5)&(member_transactions['count']!= 4)&(member_transactions['count']!= 1&(member_transactions['count']!= 6),
    (member_transactions['count']== 1)]

# create a list of the values we want to assign for each condition
values = ['Regular','Occassional','New Member']

# create a new column and use np.select to assign values to it using our lists as arguments
member_transactions['member_type'] = np.select(conditions, values)
member_transactions.head(20)
member_transactions['member_type'].unique()
member_transactions['STORE_NBR'].unique()
details = member_transactions.groupby(['VIS_MON','STORE_NBR','member_type','CHANNEL_ADD_ON']).agg({'TRANSACTION_NUMBER': 'nunique','SALES': 'sum','MEMBERSHIP_NBR': 'nunique'}).reset_index()
member_details = pd.DataFrame(details)
member_details
# function
def dfs_tabs(df_list, sheet_list, file_name):

    writer = pd.ExcelWriter(file_name,engine='xlsxwriter')   
    for dataframe, sheet in zip(df_list, sheet_list):
        dataframe.to_excel(writer, sheet_name=sheet, startrow=0 , startcol=0, merge_cells=False)   
    writer.save()

# list of dataframes and sheet names
dfs = [member_details]

sheets = ['Data']    

# run function
file = r'C:\Users\deep.mandal\Documents\DP_Data_April\member_details_nov_april.xlsx'
dfs_tabs(dfs, sheets, file)
